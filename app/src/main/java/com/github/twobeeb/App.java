/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.github.twobeeb;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.StringWriter;
import java.nio.charset.StandardCharsets;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.Certificate;
import java.security.cert.CertificateEncodingException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.Base64;
import java.util.Iterator;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }
    public static void main(String[] arg){
        displayJKS("/Users/julien/IdeaProjects/jks-to-pem/kafka.kafka1.truststore.jks", "confluent");
        displayJKS("/Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/Contents/Home/lib/security/cacerts", "changeit");
    }
    public static void displayJKS(String path, String password) {
        KeyStore ks = null;
        try {
            ks = KeyStore.getInstance("JKS");
            ks.load(new FileInputStream(path), password.toCharArray());
            for (Iterator<String> it = ks.aliases().asIterator(); it.hasNext(); ) {
                String s = it.next();
                System.out.println("Found alias: "+s);

                X509Certificate c = (X509Certificate)ks.getCertificate(s);

                System.out.println("Issued to:" + c.getSubjectDN().getName());
                System.out.println("Issued by:" + c.getIssuerDN().getName());
                System.out.println("Valid until:" + c.getNotAfter());
                System.out.println(certToString(c));
                System.out.println("------------------------");

            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (KeyStoreException e) {
            throw new RuntimeException(e);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        } catch (CertificateException e) {
            throw new RuntimeException(e);
        }


    }
    public static String certToString(Certificate cert) {
        StringWriter sw = new StringWriter();
        try {
            sw.write("-----BEGIN CERTIFICATE-----\n");
            sw.write(Base64.getEncoder().encodeToString(cert.getEncoded()).replaceAll("(.{64})", "$1\n"));
            sw.write("\n-----END CERTIFICATE-----\n");
        } catch (CertificateEncodingException e) {
            e.printStackTrace();
        }
        return sw.toString();
    }
}
